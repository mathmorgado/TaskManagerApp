import unittest

import sys
from pathlib import Path

sys.path.append(str(Path(__file__).resolve().parents[1]))

from tasks.task import Task


class TestTask(unittest.TestCase):

    def setUp(self):
        self.sample_title = "Start CS50p" 
        self.sample_deadline = "15/12/2024"
    
    def test_init(self):
        """
        Test the initialization of a Task object.

        This test verifies that:
        1. The Task object is initialized with the correct title, deadline, and default attributes.
        2. The ID attribute is automatically generated and not None.
        3. The 'completed' attribute is set to False by default.

        Steps:
        - Create a Task instance with a sample title and deadline.
        - Verify that the title and deadline match the expected values.
        - Check that the ID is not None.
        - Ensure that the 'completed' attribute is set to False by default.

        Assertions:
        - The title and deadline should match the sample values.
        - The ID should not be None.
        - The 'completed' status should be False by default.
        """
        # Create a Task instance with a sample title and deadline.
        task = Task(self.sample_title, self.sample_deadline)

        # Assert the 'title' and 'deadline' attributes matches the samples
        self.assertEqual(task.title, self.sample_title, "The task title was not set correctly.")
        self.assertEqual(task.deadline, self.sample_deadline, "The task deadline was not set correctly.")
        
        # Assert the 'id' attribute is not None and the 'completed' attribute is set to False by default
        self.assertIsNot(task.id, None, "The task ID should not be None")
        self.assertEqual(task.completed, False, "The task completion status should be False by default.")
    
    def test_to_dict(self):
        """
        Test whether the 'to_dict' method correctly converts the task object to a dictionary.

        This test verifies that:
        1. The Task object is correctly converted into a dictionary representation.
        
        Steps:
        - Create a Task instance with a sample title and deadline.
        - Convert the Task object to a dictionary using the 'to_dict' method.
        - Manually create a dictionary to represent the task.
        - Compare the generated dictionary with the manually created one.

        Assertions:
        - The dictionary generated by the 'to_dict' method should match the expected dictionary.
        """
        # Create a Task instance with a sample title and deadline
        task = Task(self.sample_title, self.sample_deadline)

        # Convert the Task object to a dictionary using the 'to_dict' method.
        task_to_dict = task.to_dict()

        # Manually create a dictionary to represent the task.
        dict_task = {"id": task.id, "title": task.title, "deadline": task.deadline, "completed": task.completed}

        # Compare the generated dictionary with the manually created one.
        self.assertEqual(task_to_dict, dict_task, "The 'to_dict' method did not return the expected dictionary representation of the task.")
    
    def test_from_dict(self):
        """
        Test the conversion of a dictionary to a Task object.

        This test verifies that:
        1. A dictionary representing a Task can be correctly converted back into a Task object.
        
        Steps:
        - Create a Task instance and convert it to a dictionary.
        - Use the 'from_dict' method to convert the dictionary back into a Task object.
        - Compare the properties of the Task object with the original dictionary.

        Assertions:
        - The Task object reconstructed from the dictionary should match the original Task object.
        """
        # Create a Task instance and convert it to a dictionary.
        task = Task(self.sample_title, self.sample_deadline)
        task_to_dict = task.to_dict()
        
        # Use the 'from_dict' method to convert the dictionary back into a Task object.
        task_from_dict = Task.from_dict(task_to_dict)

        # Assert that the Task object reconstructed from the dictionary matches the original dictionary
        self.assertEqual(task_from_dict.to_dict(), task_to_dict, "The 'from_dict' method did not correctly reconstruct the task from the dictionary.")
    
    def test_property_type_validation(self):
        """
        Test the type validation of each property in the Task object.

        This test verifies that:
        1. A TypeError is raised when invalid types are provided for title, deadline, or completed.

        Steps:
        - Attempt to create Task objects with invalid data types for title, deadline, and completed.
        - Check that a TypeError is raised in each case.

        Assertions:
        - A TypeError should be raised if invalid types are passed for title, deadline, or completed.
        """
        with self.assertRaises(TypeError):
            Task(1, self.sample_deadline) # Test Title
            Task(self.sample_title, 1) # Test deadline
            Task(self.sample_title, self.sample_deadline, completed="Test") # Test completed

    
    def test_deadline_date_format(self):
        """
        Test the validation of the deadline date format.

        This test verifies that:
        1. A ValueError is raised if the deadline does not match the expected "dd/mm/yyyy" format.
        
        Steps:
        - Attempt to create Task objects with invalid date formats for the deadline.
        - Check that a ValueError is raised in each case.

        Assertions:
        - A ValueError should be raised if the deadline format is not "dd/mm/yyyy".
        """
        # Tests different invalid date formats
        with self.assertRaises(ValueError):
            Task(self.sample_title, "25-12-2024")
            Task(self.sample_title, "12/25/2024")
            Task(self.sample_title, "2024/12/25")
            Task(self.sample_title, "December 25, 2024")
    

if __name__ == "__main__":
    unittest.main()
